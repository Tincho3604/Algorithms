/* -- PUNTO 1: Crear la tabla de ARTICULO como la indicada y plantear la relación pedida. Tener en cuenta los datos que se importarán y los códigos de Artículos son autonuméricos. */
CREATE TABLE FABRICANTE(
    CODIGO Number(6) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    RAZON_SOCIAL VARCHAR(50) NOT NULL
);

CREATE TABLE ARTICULO(
    CODIGO Number(4) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    DESCRIPCCION VARCHAR(40) NOT NULL,
    PRECIO NUMBER(6,2) NOT NULL,
    FABRICANTE_CODIGO NUMBER(6) NOT NULL,
    FOREIGN KEY (FABRICANTE_CODIGO) REFERENCES FABRICANTE(CODIGO)    
);

/* -- PUNTO 3: Actualizar los precios de los artículos que tengan un precio entre $12500 y $ 38000 a $ 56000. */
UPDATE ARTICULO SET PRECIO = 56000 WHERE PRECIO > 12500 AND PRECIO < 38000;

/* -- PUNTO 4: Actualizar los precios de los artículos que tengan un precio entre $12500 y $ 38000 a $ 56000. */
SELECT * FROM ARTICULO WHERE PRECIO < 15000;

/* -- PUNTO 5: Eliminar todos los artículos con precios mayores a $ 2.000.000 y del fabricante con código 4. */
DELETE FROM ARTICULO WHERE PRECIO > 2000000 AND FABRICANTE = 4;

/* -- PUNTO 6: Listar todos los artículos con una descripción que contenga la palabra “ropa”. */
SELECT * FROM ARTICULO WHERE DESCRIPCCION = 'ropa';

/* -- PUNTO 7: Listar los fabricantes cuya razón social comience con “FR” */
SELECT * FROM FABRICANTE WHERE RAZON_SOCIAL LIKE 'FR%';

/* -- PUNTO 8: Aumentar los precios de todos los artículos en un 5%. */
UPDATE ARTICULO SET PRECIO = PRECIO * 1.05;

/* -- PUNTO 9: Realizar un aumento de un 15% en aquellos productos que sean de los fabricantes con códigos 2 y 3. */
UPDATE ARTICULO 
SET PRECIO = PRECIO * 1.15 
WHERE FABRICANTE IN (2, 3);

/* -- PUNTO 10: Indicar cual es el mayor precio que tiene cada fabricante. */
SELECT MAX(PRECIO) FROM ARTICULO GROUP BY FABRICANTE;

/* -- PUNTO 11: Obtener los nombres de los fabricantes que ofrezcan productos con precio medio mayor a $8500. */
SELECT F.RAZON_SOCIAL
FROM ARTICULO A
JOIN FABRICANTE F ON A.FABRICANTE = F.CODIGO
WHERE (SELECT AVG(PRECIO) FROM ARTICULO) > 8500;

/* -- PUNTO 12: Mostrar el promedio de precios de todos los artículos de cada uno de los fabricantes. */
SELECT AVG(A.PRECIO) FROM ARTICULO A JOIN FABRICANTE F ON A.FABRICANTE = F.CODIGO GROUP BY F.CODIGO;

/* -- PUNTO 13: Obtener el precio medio de los productos de cada fabricante mostrando el nombre del fabricante. */
SELECT F.RAZON_SOCIAL, AVG(A.PRECIO) AS PrecioMedio
FROM ARTICULO A
JOIN FABRICANTE F ON A.FABRICANTE = F.CODIGO
GROUP BY F.RAZON_SOCIAL;

/* -- PUNTO 14: Mostrar cuál es la cantidad de proveedores, fabricantes, que tiene la empresa.*/
SELECT COUNT(CODIGO) FROM FABRICANTE; 

/* -- PUNTO 15: Se necesita saber cuántos productos provee cada fabricante. */  
SELECT F.RAZON_SOCIAL, count(A.FABRICANTE)
FROM ARTICULO A
JOIN FABRICANTE F
ON A.FABRICANTE = F.CODIGO
GROUP BY F.RAZON_SOCIAL;

/* -- PUNTO 16: Listar nombres y precios de los artículos más caros de cada fabricante con el nombre de éste. */ 
SELECT F.RAZON_SOCIAL, MAX(A.PRECIO)
FROM ARTICULO A
JOIN FABRICANTE F
ON A.FABRICANTE = F.CODIGO
GROUP BY F.RAZON_SOCIAL;

/* -- PUNTO 17: Listar la Razón Social de los Fabricantes que no nos proveen artículos actualmente. */

SELECT FAB.RAZON_SOCIAL
FROM ARTICULO ART
RIGHT JOIN FABRICANTE FAB ON ART.FABRICANTE = FAB.CODIGO 
WHERE ART.FABRICANTE IS NULL;

/* -- PUNTO 18: Listar los Fabricantes que nos proveen más de tres artículos. */

SELECT FAB.RAZON_SOCIAL
FROM ARTICULO ART
INNER JOIN FABRICANTE FAB ON ART.FABRICANTE = FAB.CODIGO 
GROUP BY FAB.RAZON_SOCIAL
HAVING COUNT(ART.FABRICANTE) > 3;

/* -- PUNTO 19: Obtener los nombres de los productos que nos proveen el fabricante ‘Kerflex’ */
SELECT ART.DESCRIPCION  
FROM ARTICULO ART
INNER JOIN FABRICANTE FAB ON ART.FABRICANTE = FAB.CODIGO 
WHERE ART.FABRICANTE = 4;


